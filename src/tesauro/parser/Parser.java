/* This file was generated by SableCC (http://www.sablecc.org/). */

package tesauro.parser;

import tesauro.lexer.*;
import tesauro.node.*;
import tesauro.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAablocobloco1Bloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAablocobloco2Bloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAablocobloco3Bloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAablocobloco4Bloco */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAavardeclaracao1declaracao1Declaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAavardeclaracao1declaracao2Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AConstanteDeclaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AConstAttDeclaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce AIdComma */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ARealTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AIntegerTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce ASimplesTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ACompostoTipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ATipoVec */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AAavarvar1Var */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AAavarvar2Var */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AVarVec */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce ACmdSemCmdCmd */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list);
            }
            break;
            case 20: /* reduce AIctDoCmd */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list);
            }
            break;
            case 21: /* reduce AIctDoElseCmd */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AIterationCmdCmd */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce ABlocoCmd */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce ACmdSemCmdCmdNoShortIct */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AIctDoElseNoIfCmdNoShortIct */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AIterationCmdNoIfCmdNoShortIct */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce ABlocoCmdNoShortIct */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce AAttCmdCmdSemCmd */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AFuncCmdCmdSemCmd */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AIctDo */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AIctDoElse */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list);
            }
            break;
            case 32: /* reduce AIctDoElseNoShortIct */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AAttVarAttCmd */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list);
            }
            break;
            case 34: /* reduce AAttConstAttCmd */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list);
            }
            break;
            case 35: /* reduce AAacapturefunccmdfunccmd1FuncCmd */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list);
            }
            break;
            case 36: /* reduce AAacapturefunccmdfunccmd2FuncCmd */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list);
            }
            break;
            case 37: /* reduce AAashowfunccmdfunccmd1FuncCmd */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list);
            }
            break;
            case 38: /* reduce AAashowfunccmdfunccmd2FuncCmd */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list);
            }
            break;
            case 39: /* reduce AAsLongAsIterationCmd */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce AConsideringIterationCmd */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce AAsLongAsIterationCmdNoShortIct */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list);
            }
            break;
            case 42: /* reduce AConsideringIterationCmdNoShortIct */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list);
            }
            break;
            case 43: /* reduce AVarComma */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list);
            }
            break;
            case 44: /* reduce AExpComma */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce AOrOpExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list);
            }
            break;
            case 46: /* reduce AAndOpOrOp */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list);
            }
            break;
            case 47: /* reduce AOrOrOp */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list);
            }
            break;
            case 48: /* reduce AXorOpAndOp */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list);
            }
            break;
            case 49: /* reduce AAndAndOp */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list);
            }
            break;
            case 50: /* reduce AEqOpXorOp */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list);
            }
            break;
            case 51: /* reduce AXorXorOp */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list);
            }
            break;
            case 52: /* reduce ARelOpEqOp */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list);
            }
            break;
            case 53: /* reduce AIgualEqOp */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce ADiffEqOp */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list);
            }
            break;
            case 55: /* reduce AOpRelOp */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list);
            }
            break;
            case 56: /* reduce AMaiorRelOp */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list);
            }
            break;
            case 57: /* reduce AMenorRelOp */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list);
            }
            break;
            case 58: /* reduce AMaiorIRelOp */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list);
            }
            break;
            case 59: /* reduce AMenorIRelOp */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list);
            }
            break;
            case 60: /* reduce AFatorOp */
            {
                ArrayList<Object> list = new60();
                push(goTo(27), list);
            }
            break;
            case 61: /* reduce ASumOp */
            {
                ArrayList<Object> list = new61();
                push(goTo(27), list);
            }
            break;
            case 62: /* reduce AMinusOp */
            {
                ArrayList<Object> list = new62();
                push(goTo(27), list);
            }
            break;
            case 63: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new63();
                push(goTo(28), list);
            }
            break;
            case 64: /* reduce AMultFator */
            {
                ArrayList<Object> list = new64();
                push(goTo(28), list);
            }
            break;
            case 65: /* reduce ADivFator */
            {
                ArrayList<Object> list = new65();
                push(goTo(28), list);
            }
            break;
            case 66: /* reduce AModFator */
            {
                ArrayList<Object> list = new66();
                push(goTo(28), list);
            }
            break;
            case 67: /* reduce AMinUnFator */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list);
            }
            break;
            case 68: /* reduce ANotFator */
            {
                ArrayList<Object> list = new68();
                push(goTo(28), list);
            }
            break;
            case 69: /* reduce AValorTermo */
            {
                ArrayList<Object> list = new69();
                push(goTo(29), list);
            }
            break;
            case 70: /* reduce AVarTermo */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list);
            }
            break;
            case 71: /* reduce AParTermo */
            {
                ArrayList<Object> list = new71();
                push(goTo(29), list);
            }
            break;
            case 72: /* reduce ASymValor */
            {
                ArrayList<Object> list = new72();
                push(goTo(30), list);
            }
            break;
            case 73: /* reduce ARealValor */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list);
            }
            break;
            case 74: /* reduce AIntValor */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list);
            }
            break;
            case 75: /* reduce AStringValor */
            {
                ArrayList<Object> list = new75();
                push(goTo(30), list);
            }
            break;
            case 76: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new76();
                push(goTo(31), list);
            }
            break;
            case 77: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new77();
                push(goTo(31), list);
            }
            break;
            case 78: /* reduce ATerminal$Cmd */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list);
            }
            break;
            case 79: /* reduce ANonTerminal$Cmd */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list);
            }
            break;
            case 80: /* reduce ATerminal$IdComma */
            {
                ArrayList<Object> list = new80();
                push(goTo(33), list);
            }
            break;
            case 81: /* reduce ANonTerminal$IdComma */
            {
                ArrayList<Object> list = new81();
                push(goTo(33), list);
            }
            break;
            case 82: /* reduce ATerminal$TipoVec */
            {
                ArrayList<Object> list = new82();
                push(goTo(34), list);
            }
            break;
            case 83: /* reduce ANonTerminal$TipoVec */
            {
                ArrayList<Object> list = new83();
                push(goTo(34), list);
            }
            break;
            case 84: /* reduce ATerminal$VarVec */
            {
                ArrayList<Object> list = new84();
                push(goTo(35), list);
            }
            break;
            case 85: /* reduce ANonTerminal$VarVec */
            {
                ArrayList<Object> list = new85();
                push(goTo(35), list);
            }
            break;
            case 86: /* reduce ATerminal$VarComma */
            {
                ArrayList<Object> list = new86();
                push(goTo(36), list);
            }
            break;
            case 87: /* reduce ANonTerminal$VarComma */
            {
                ArrayList<Object> list = new87();
                push(goTo(36), list);
            }
            break;
            case 88: /* reduce ATerminal$ExpComma */
            {
                ArrayList<Object> list = new88();
                push(goTo(37), list);
            }
            break;
            case 89: /* reduce ANonTerminal$ExpComma */
            {
                ArrayList<Object> list = new89();
                push(goTo(37), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TId tidNode2;
        PBloco pblocoNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pblocoNode3 = (PBloco)nodeArrayList3.get(0);

        pprogramaNode1 = new APrograma(tidNode2, pblocoNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAablocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pblocoNode1 = new ABloco(listNode2, listNode3);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAablocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pblocoNode1 = new ABloco(listNode3, listNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAablocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pblocoNode1 = new ABloco(listNode2, listNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAablocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pblocoNode1 = new ABloco(listNode3, listNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAavardeclaracao1declaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TId tidNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        }
        tidNode4 = (TId)nodeArrayList2.get(0);

        pdeclaracaoNode1 = new AVarDeclaracao(ptipoNode2, listNode3, tidNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAavardeclaracao1declaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TId tidNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tidNode5 = (TId)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AVarDeclaracao(ptipoNode2, listNode4, tidNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AConstanteDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstanteDeclaracao(ptipoNode2, tidNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AConstAttDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PExp pexpNode4;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AConstAttDeclaracao(ptipoNode2, tidNode3, pexpNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIdComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        ptipoNode1 = new ASymbolTipo(tsymbolNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ARealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIntegerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipoNode1 = new AIntegerTipo(tintegerNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASimplesTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        ptipoNode1 = (PTipo)nodeArrayList1.get(0);
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ACompostoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TVector tvectorNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tvectorNode3 = (TVector)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ptipoNode1 = new ACompostoTipo(ptipoNode2, tvectorNode3, listNode5);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipoVec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAavarvar1Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpNode1 = new AVarExp(tidNode2, listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAavarvar2Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AVarExp(tidNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVarVec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ACmdSemCmdCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PCmdSemCmd pcmdsemcmdNode2;
        pcmdsemcmdNode2 = (PCmdSemCmd)nodeArrayList1.get(0);

        pcmdNode1 = new ACmdSemCmdCmd(pcmdsemcmdNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AIctDoCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PIctDo pictdoNode2;
        pictdoNode2 = (PIctDo)nodeArrayList1.get(0);

        pcmdNode1 = new AIctDoCmd(pictdoNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIctDoElseCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PIctDoElse pictdoelseNode2;
        pictdoelseNode2 = (PIctDoElse)nodeArrayList1.get(0);

        pcmdNode1 = new AIctDoElseCmd(pictdoelseNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIterationCmdCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PIterationCmd piterationcmdNode2;
        piterationcmdNode2 = (PIterationCmd)nodeArrayList1.get(0);

        pcmdNode1 = new AIterationCmdCmd(piterationcmdNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ABlocoCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcmdNode1 = new ABlocoCmd(pblocoNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACmdSemCmdCmdNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdNoShortIct pcmdnoshortictNode1;
        {
            // Block
        PCmdSemCmd pcmdsemcmdNode2;
        pcmdsemcmdNode2 = (PCmdSemCmd)nodeArrayList1.get(0);

        pcmdnoshortictNode1 = new ACmdSemCmdCmdNoShortIct(pcmdsemcmdNode2);
        }
	nodeList.add(pcmdnoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIctDoElseNoIfCmdNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdNoShortIct pcmdnoshortictNode1;
        {
            // Block
        PIctDoElseNoShortIct pictdoelsenoshortictNode2;
        pictdoelsenoshortictNode2 = (PIctDoElseNoShortIct)nodeArrayList1.get(0);

        pcmdnoshortictNode1 = new AIctDoElseNoIfCmdNoShortIct(pictdoelsenoshortictNode2);
        }
	nodeList.add(pcmdnoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIterationCmdNoIfCmdNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdNoShortIct pcmdnoshortictNode1;
        {
            // Block
        PIterationCmdNoShortIct piterationcmdnoshortictNode2;
        piterationcmdnoshortictNode2 = (PIterationCmdNoShortIct)nodeArrayList1.get(0);

        pcmdnoshortictNode1 = new AIterationCmdNoIfCmdNoShortIct(piterationcmdnoshortictNode2);
        }
	nodeList.add(pcmdnoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABlocoCmdNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdNoShortIct pcmdnoshortictNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcmdnoshortictNode1 = new ABlocoCmdNoShortIct(pblocoNode2);
        }
	nodeList.add(pcmdnoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAttCmdCmdSemCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        pcmdsemcmdNode1 = (PCmdSemCmd)nodeArrayList1.get(0);
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AFuncCmdCmdSemCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        pcmdsemcmdNode1 = (PCmdSemCmd)nodeArrayList1.get(0);
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIctDo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIctDo pictdoNode1;
        {
            // Block
        PExp pexpNode2;
        PCmd pcmdNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcmdNode3 = (PCmd)nodeArrayList6.get(0);

        pictdoNode1 = new AIctDo(pexpNode2, pcmdNode3);
        }
	nodeList.add(pictdoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIctDoElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIctDoElse pictdoelseNode1;
        {
            // Block
        PExp pexpNode2;
        PCmdNoShortIct pcmdnoshortictNode3;
        PCmd pcmdNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcmdnoshortictNode3 = (PCmdNoShortIct)nodeArrayList6.get(0);
        pcmdNode4 = (PCmd)nodeArrayList8.get(0);

        pictdoelseNode1 = new AIctDoElse(pexpNode2, pcmdnoshortictNode3, pcmdNode4);
        }
	nodeList.add(pictdoelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIctDoElseNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIctDoElseNoShortIct pictdoelsenoshortictNode1;
        {
            // Block
        PExp pexpNode2;
        PCmdNoShortIct pcmdnoshortictNode3;
        PCmdNoShortIct pcmdnoshortictNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcmdnoshortictNode3 = (PCmdNoShortIct)nodeArrayList6.get(0);
        pcmdnoshortictNode4 = (PCmdNoShortIct)nodeArrayList8.get(0);

        pictdoelsenoshortictNode1 = new AIctDoElseNoShortIct(pexpNode2, pcmdnoshortictNode3, pcmdnoshortictNode4);
        }
	nodeList.add(pictdoelsenoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAttVarAttCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcmdsemcmdNode1 = new AAttVarCmdSemCmd(pexpNode2, pexpNode3);
        }
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAttConstAttCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);

        pcmdsemcmdNode1 = new AAttConstCmdSemCmd(pexpNode2, pexpNode3);
        }
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAacapturefunccmdfunccmd1FuncCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcmdsemcmdNode1 = new ACaptureCmdSemCmd(listNode2, pexpNode3);
        }
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAacapturefunccmdfunccmd2FuncCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pcmdsemcmdNode1 = new ACaptureCmdSemCmd(listNode3, pexpNode4);
        }
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAashowfunccmdfunccmd1FuncCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcmdsemcmdNode1 = new AShowCmdSemCmd(listNode2, pexpNode3);
        }
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAashowfunccmdfunccmd2FuncCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSemCmd pcmdsemcmdNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pcmdsemcmdNode1 = new AShowCmdSemCmd(listNode3, pexpNode4);
        }
	nodeList.add(pcmdsemcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAsLongAsIterationCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationCmd piterationcmdNode1;
        {
            // Block
        PExp pexpNode2;
        PCmd pcmdNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcmdNode3 = (PCmd)nodeArrayList6.get(0);

        piterationcmdNode1 = new AAsLongAsIterationCmd(pexpNode2, pcmdNode3);
        }
	nodeList.add(piterationcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AConsideringIterationCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationCmd piterationcmdNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        PCmd pcmdNode6;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);
        pcmdNode6 = (PCmd)nodeArrayList10.get(0);

        piterationcmdNode1 = new AConsideringIterationCmd(pexpNode2, pexpNode3, pexpNode4, pexpNode5, pcmdNode6);
        }
	nodeList.add(piterationcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAsLongAsIterationCmdNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationCmdNoShortIct piterationcmdnoshortictNode1;
        {
            // Block
        PExp pexpNode2;
        PCmdNoShortIct pcmdnoshortictNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcmdnoshortictNode3 = (PCmdNoShortIct)nodeArrayList6.get(0);

        piterationcmdnoshortictNode1 = new AAsLongAsIterationCmdNoShortIct(pexpNode2, pcmdnoshortictNode3);
        }
	nodeList.add(piterationcmdnoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AConsideringIterationCmdNoShortIct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIterationCmdNoShortIct piterationcmdnoshortictNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        PCmdNoShortIct pcmdnoshortictNode6;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);
        pcmdnoshortictNode6 = (PCmdNoShortIct)nodeArrayList10.get(0);

        piterationcmdnoshortictNode1 = new AConsideringIterationCmdNoShortIct(pexpNode2, pexpNode3, pexpNode4, pexpNode5, pcmdnoshortictNode6);
        }
	nodeList.add(piterationcmdnoshortictNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AVarComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AOrOpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAndOpOrOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AOrOrOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AXorOpAndOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAndAndOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEqOpXorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AXorXorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AXorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ARelOpEqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AIgualEqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ADiffEqOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADiffExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AOpRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMaiorRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMenorRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMaiorIRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorIExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMenorIRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorIExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AFatorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ASumOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASumExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMultFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ADivFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AModFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AMinUnFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AMinUnExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANotFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AValorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AVarTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AParTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ASymValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TSymVal tsymvalNode2;
        tsymvalNode2 = (TSymVal)nodeArrayList1.get(0);

        pexpNode1 = new ASymValExp(tsymvalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TRealVal trealvalNode2;
        trealvalNode2 = (TRealVal)nodeArrayList1.get(0);

        pexpNode1 = new ARealValExp(trealvalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIntVal tintvalNode2;
        tintvalNode2 = (TIntVal)nodeArrayList1.get(0);

        pexpNode1 = new AIntValExp(tintvalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TSymVecVal tsymvecvalNode2;
        tsymvecvalNode2 = (TSymVecVal)nodeArrayList1.get(0);

        pexpNode1 = new ASymVecValExp(tsymvecvalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$Cmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCmd pcmdNode1;
        pcmdNode1 = (PCmd)nodeArrayList1.get(0);
	if(pcmdNode1 != null)
	{
	  listNode2.add(pcmdNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$Cmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCmd pcmdNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcmdNode2 = (PCmd)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcmdNode2 != null)
	{
	  listNode3.add(pcmdNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$IdComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$IdComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TId tidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidNode2 = (TId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidNode2 != null)
	{
	  listNode3.add(tidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$TipoVec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$TipoVec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$VarVec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$VarVec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$VarComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$VarComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$ExpComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$ExpComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {47, SHIFT, 3}, },
			{{-1, ERROR, 2}, {48, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {4, SHIFT, 4}, },
			{{-1, ERROR, 4}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 4}, {5, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 10}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {47, SHIFT, 16}, },
			{{-1, ERROR, 11}, {39, SHIFT, 33}, },
			{{-1, ERROR, 12}, {39, SHIFT, 34}, },
			{{-1, ERROR, 13}, {47, SHIFT, 16}, },
			{{-1, ERROR, 14}, {39, SHIFT, 36}, },
			{{-1, ERROR, 15}, {39, SHIFT, 37}, },
			{{-1, REDUCE, 16}, {41, SHIFT, 38}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 13}, {6, SHIFT, 41}, },
			{{-1, ERROR, 20}, {47, SHIFT, 42}, },
			{{-1, ERROR, 21}, {33, SHIFT, 45}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 29}, {1, SHIFT, 6}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 4}, {5, SHIFT, 46}, {7, SHIFT, 10}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 30}, {4, SHIFT, 4}, {5, SHIFT, 49}, {7, SHIFT, 50}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 31}, {47, SHIFT, 52}, },
			{{-1, ERROR, 32}, {34, SHIFT, 53}, },
			{{-1, ERROR, 33}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 34}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 35}, {15, SHIFT, 73}, },
			{{-1, ERROR, 36}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 37}, {47, SHIFT, 16}, },
			{{-1, ERROR, 38}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 17}, {41, SHIFT, 38}, },
			{{-1, ERROR, 41}, {41, SHIFT, 82}, },
			{{-1, ERROR, 42}, {45, SHIFT, 85}, {46, SHIFT, 86}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 44}, {47, SHIFT, 87}, },
			{{-1, ERROR, 45}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 48}, {4, SHIFT, 4}, {5, SHIFT, 90}, {7, SHIFT, 50}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 50}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 52}, {34, SHIFT, 91}, {45, SHIFT, 92}, },
			{{-1, ERROR, 53}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 58}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 59}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 60}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 62}, {40, SHIFT, 97}, },
			{{-1, REDUCE, 45}, {37, SHIFT, 98}, },
			{{-1, REDUCE, 46}, {36, SHIFT, 99}, },
			{{-1, REDUCE, 48}, {38, SHIFT, 100}, },
			{{-1, REDUCE, 50}, {31, SHIFT, 101}, {32, SHIFT, 102}, },
			{{-1, REDUCE, 52}, {27, SHIFT, 103}, {28, SHIFT, 104}, {29, SHIFT, 105}, {30, SHIFT, 106}, },
			{{-1, REDUCE, 55}, {22, SHIFT, 107}, {23, SHIFT, 108}, },
			{{-1, REDUCE, 60}, {24, SHIFT, 109}, {25, SHIFT, 110}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 72}, {40, SHIFT, 112}, },
			{{-1, ERROR, 73}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 75}, {40, SHIFT, 114}, {46, SHIFT, 115}, },
			{{-1, ERROR, 76}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 77}, {40, SHIFT, 118}, {46, SHIFT, 119}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 79}, {47, SHIFT, 16}, },
			{{-1, ERROR, 80}, {42, SHIFT, 122}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 82}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 14}, {41, SHIFT, 82}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 87}, {45, SHIFT, 125}, {46, SHIFT, 86}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 89}, {45, SHIFT, 126}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 91}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 93}, {45, SHIFT, 128}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 96}, {40, SHIFT, 129}, },
			{{-1, ERROR, 97}, {14, SHIFT, 130}, },
			{{-1, ERROR, 98}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 99}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 100}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 101}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 102}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 103}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 104}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 105}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 106}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 107}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 108}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 109}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 110}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 111}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 112}, {14, SHIFT, 145}, },
			{{-1, ERROR, 113}, {16, SHIFT, 146}, },
			{{-1, ERROR, 114}, {45, SHIFT, 147}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 117}, {40, SHIFT, 148}, {46, SHIFT, 115}, },
			{{-1, ERROR, 118}, {45, SHIFT, 149}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 120}, {40, SHIFT, 150}, {46, SHIFT, 119}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 123}, {42, SHIFT, 151}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 127}, {45, SHIFT, 152}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 130}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 155}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 47}, {36, SHIFT, 99}, },
			{{-1, REDUCE, 49}, {38, SHIFT, 100}, },
			{{-1, REDUCE, 51}, {31, SHIFT, 101}, {32, SHIFT, 102}, },
			{{-1, REDUCE, 53}, {27, SHIFT, 103}, {28, SHIFT, 104}, {29, SHIFT, 105}, {30, SHIFT, 106}, },
			{{-1, REDUCE, 54}, {27, SHIFT, 103}, {28, SHIFT, 104}, {29, SHIFT, 105}, {30, SHIFT, 106}, },
			{{-1, REDUCE, 57}, {22, SHIFT, 107}, {23, SHIFT, 108}, },
			{{-1, REDUCE, 56}, {22, SHIFT, 107}, {23, SHIFT, 108}, },
			{{-1, REDUCE, 58}, {22, SHIFT, 107}, {23, SHIFT, 108}, },
			{{-1, REDUCE, 59}, {22, SHIFT, 107}, {23, SHIFT, 108}, },
			{{-1, REDUCE, 61}, {24, SHIFT, 109}, {25, SHIFT, 110}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 62}, {24, SHIFT, 109}, {25, SHIFT, 110}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 145}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 146}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 148}, {45, SHIFT, 164}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 150}, {45, SHIFT, 165}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 153}, {39, SHIFT, 166}, },
			{{-1, ERROR, 154}, {39, SHIFT, 167}, },
			{{-1, ERROR, 155}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 23}, {13, REDUCE, 27}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 158}, {13, SHIFT, 169}, },
			{{-1, REDUCE, 19}, {13, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 163}, {17, SHIFT, 170}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 166}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 167}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 168}, {15, SHIFT, 173}, },
			{{-1, ERROR, 169}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 170}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, ERROR, 171}, {40, SHIFT, 176}, },
			{{-1, ERROR, 172}, {40, SHIFT, 177}, },
			{{-1, ERROR, 173}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 175}, {14, SHIFT, 179}, },
			{{-1, ERROR, 176}, {14, SHIFT, 180}, },
			{{-1, ERROR, 177}, {14, SHIFT, 181}, },
			{{-1, ERROR, 178}, {16, SHIFT, 182}, },
			{{-1, ERROR, 179}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 180}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 155}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 181}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 155}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 182}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 184}, {13, SHIFT, 187}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 186}, {17, SHIFT, 188}, },
			{{-1, ERROR, 187}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 155}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, ERROR, 188}, {18, SHIFT, 54}, {19, SHIFT, 55}, {20, SHIFT, 56}, {21, SHIFT, 57}, {23, SHIFT, 58}, {35, SHIFT, 59}, {39, SHIFT, 60}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 190}, {14, SHIFT, 191}, },
			{{-1, ERROR, 191}, {4, SHIFT, 4}, {7, SHIFT, 50}, {8, SHIFT, 153}, {9, SHIFT, 154}, {10, SHIFT, 155}, {11, SHIFT, 14}, {12, SHIFT, 15}, {47, SHIFT, 16}, },
			{{-1, REDUCE, 42}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 17}, {3, 5}, {130, 156}, {180, 156}, {181, 156}, {187, 156}, {191, 156}, },
			{{-1, 18}, {29, 47}, },
			{{-1, 43}, {44, 88}, },
			{{-1, 19}, },
			{{-1, 20}, {10, 31}, },
			{{-1, 83}, {84, 124}, },
			{{-1, 61}, {4, 21}, {10, 32}, {13, 35}, {29, 21}, {30, 21}, {37, 77}, {48, 21}, {50, 32}, {79, 120}, {130, 21}, {145, 21}, {155, 168}, {169, 21}, {179, 21}, {180, 21}, {181, 21}, {187, 21}, {191, 21}, },
			{{-1, 39}, {40, 81}, },
			{{-1, 22}, {30, 51}, {48, 51}, {130, 157}, {145, 162}, {169, 174}, {179, 183}, {180, 157}, {181, 162}, {187, 174}, {191, 183}, },
			{{-1, 158}, {180, 184}, {181, 185}, {187, 189}, {191, 192}, },
			{{-1, 23}, {130, 159}, {180, 159}, {181, 159}, {187, 159}, {191, 159}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 160}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 161}, },
			{{-1, 78}, {79, 121}, },
			{{-1, 74}, {76, 116}, },
			{{-1, 62}, {34, 72}, {36, 75}, {38, 80}, {45, 89}, {53, 93}, {60, 96}, {73, 113}, {76, 117}, {146, 163}, {166, 171}, {167, 172}, {170, 175}, {173, 178}, {182, 186}, {188, 190}, },
			{{-1, 63}, },
			{{-1, 64}, {98, 131}, },
			{{-1, 65}, {99, 132}, },
			{{-1, 66}, {100, 133}, },
			{{-1, 67}, {101, 134}, {102, 135}, },
			{{-1, 68}, {103, 136}, {104, 137}, {105, 138}, {106, 139}, },
			{{-1, 69}, {107, 140}, {108, 141}, },
			{{-1, 70}, {58, 94}, {59, 95}, {109, 142}, {110, 143}, {111, 144}, },
			{{-1, 71}, {82, 123}, {91, 127}, },
			{{-1, 29}, },
			{{-1, 30}, {29, 48}, },
			{{-1, 44}, },
			{{-1, 84}, },
			{{-1, 40}, },
			{{-1, 79}, },
			{{-1, 76}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'code'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'symbol', 'real', 'integer', 'start', 'finish', 'unalterable', in case that, as long as, 'considering', 'show', 'capture', id",
			"expecting: 'vector', id",
			"expecting: 'start', 'finish', 'unalterable', in case that, as long as, 'considering', 'show', 'capture', 'else', id, EOF",
			"expecting: 'symbol', 'real', 'integer', id",
			"expecting: '('",
			"expecting: 'do', 'from', 'to', 'by', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', ':=', '=', 'and', 'or', 'xor', ')', '[', ']', ';', ','",
			"expecting: 'start', 'finish', 'unalterable', in case that, as long as, 'considering', 'show', 'capture', id",
			"expecting: ':='",
			"expecting: 'start', 'finish', 'unalterable', in case that, as long as, 'considering', 'show', 'capture', 'else', id",
			"expecting: '='",
			"expecting: sym val, sym vec val, real val, int val, '-', '!', '(', id",
			"expecting: 'from'",
			"expecting: '['",
			"expecting: ';', ','",
			"expecting: '=', ';'",
			"expecting: 'do', 'to', 'by', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor', ')', ']', ';', ','",
			"expecting: sym val, sym vec val, real val, int val, '(', id",
			"expecting: ')'",
			"expecting: 'do', 'to', 'by', 'or', ')', ']', ';', ','",
			"expecting: 'do', 'to', 'by', 'and', 'or', ')', ']', ';', ','",
			"expecting: 'do', 'to', 'by', 'and', 'or', 'xor', ')', ']', ';', ','",
			"expecting: 'do', 'to', 'by', '==', '!=', 'and', 'or', 'xor', ')', ']', ';', ','",
			"expecting: 'do', 'to', 'by', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor', ')', ']', ';', ','",
			"expecting: 'do', 'to', 'by', '+', '-', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor', ')', ']', ';', ','",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: sym val, sym vec val, real val, int val",
			"expecting: '[', id",
			"expecting: ';'",
			"expecting: 'do'",
			"expecting: 'to'",
			"expecting: 'start', 'unalterable', in case that, as long as, 'considering', 'show', 'capture', id",
			"expecting: 'else'",
			"expecting: 'by'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 5, 6, 7, 8, 8, 1, 8, 8, 9, 10, 4, 5, 1, 11, 10, 10, 10, 10, 12, 12, 10, 4, 10, 1, 13, 14, 14, 15, 14, 1, 14, 9, 9, 16, 17, 1, 1, 14, 6, 4, 10, 6, 1, 10, 18, 14, 19, 19, 19, 19, 20, 20, 14, 19, 21, 22, 23, 24, 25, 26, 27, 19, 19, 19, 21, 14, 14, 28, 14, 28, 1, 1, 29, 9, 30, 31, 31, 4, 1, 17, 1, 32, 6, 30, 4, 32, 19, 19, 21, 33, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 20, 20, 20, 33, 34, 32, 14, 14, 28, 32, 1, 28, 1, 9, 29, 31, 4, 12, 32, 12, 19, 35, 23, 24, 25, 26, 26, 27, 27, 27, 27, 19, 19, 19, 19, 19, 35, 14, 12, 32, 12, 32, 31, 4, 8, 8, 1, 12, 10, 36, 12, 36, 36, 10, 37, 12, 12, 14, 14, 15, 35, 14, 21, 21, 14, 10, 33, 33, 33, 34, 35, 35, 35, 14, 10, 36, 36, 37, 35, 14, 36, 33, 35, 36, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
