/* This file was generated by SableCC (http://www.sablecc.org/). */

package tesauro.node;

import tesauro.analysis.*;

@SuppressWarnings("nls")
public final class AIctDoCmd extends PCmd
{
    private PIctDo _ictDo_;

    public AIctDoCmd()
    {
        // Constructor
    }

    public AIctDoCmd(
        @SuppressWarnings("hiding") PIctDo _ictDo_)
    {
        // Constructor
        setIctDo(_ictDo_);

    }

    @Override
    public Object clone()
    {
        return new AIctDoCmd(
            cloneNode(this._ictDo_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIctDoCmd(this);
    }

    public PIctDo getIctDo()
    {
        return this._ictDo_;
    }

    public void setIctDo(PIctDo node)
    {
        if(this._ictDo_ != null)
        {
            this._ictDo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ictDo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ictDo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ictDo_ == child)
        {
            this._ictDo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ictDo_ == oldChild)
        {
            setIctDo((PIctDo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
