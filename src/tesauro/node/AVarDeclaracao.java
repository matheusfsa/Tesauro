/* This file was generated by SableCC (http://www.sablecc.org/). */

package tesauro.node;

import java.util.*;
import tesauro.analysis.*;

@SuppressWarnings("nls")
public final class AVarDeclaracao extends PDeclaracao
{
    private PTipo _tipo_;
    private final LinkedList<TId> _lista_ = new LinkedList<TId>();
    private TId _id_;

    public AVarDeclaracao()
    {
        // Constructor
    }

    public AVarDeclaracao(
        @SuppressWarnings("hiding") PTipo _tipo_,
        @SuppressWarnings("hiding") List<?> _lista_,
        @SuppressWarnings("hiding") TId _id_)
    {
        // Constructor
        setTipo(_tipo_);

        setLista(_lista_);

        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new AVarDeclaracao(
            cloneNode(this._tipo_),
            cloneList(this._lista_),
            cloneNode(this._id_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDeclaracao(this);
    }

    public PTipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PTipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public LinkedList<TId> getLista()
    {
        return this._lista_;
    }

    public void setLista(List<?> list)
    {
        for(TId e : this._lista_)
        {
            e.parent(null);
        }
        this._lista_.clear();
        
        for(Object obj_e : list)
        {
            TId e = (TId) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._lista_.add(e);
        }
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipo_)
            + toString(this._lista_)
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._lista_.remove(child))
        {
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipo_ == oldChild)
        {
            setTipo((PTipo) newChild);
            return;
        }

        for(ListIterator<TId> i = this._lista_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
