/* This file was generated by SableCC (http://www.sablecc.org/). */

package tesauro.analysis;

import tesauro.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);
    void caseABloco(ABloco node);
    void caseAVarDeclaracao(AVarDeclaracao node);
    void caseAConstanteDeclaracao(AConstanteDeclaracao node);
    void caseAConstAttDeclaracao(AConstAttDeclaracao node);
    void caseASymbolTipo(ASymbolTipo node);
    void caseARealTipo(ARealTipo node);
    void caseAIntegerTipo(AIntegerTipo node);
    void caseACompostoTipo(ACompostoTipo node);
    void caseASymValor(ASymValor node);
    void caseARealValor(ARealValor node);
    void caseAIntValor(AIntValor node);
    void caseAStringValor(AStringValor node);
    void caseACmdSemCmdCmd(ACmdSemCmdCmd node);
    void caseAIctDoCmd(AIctDoCmd node);
    void caseAIctDoElseCmd(AIctDoElseCmd node);
    void caseAIterationCmdCmd(AIterationCmdCmd node);
    void caseABlocoCmd(ABlocoCmd node);
    void caseACmdSemCmdCmdNoShortIct(ACmdSemCmdCmdNoShortIct node);
    void caseAIctDoElseNoIfCmdNoShortIct(AIctDoElseNoIfCmdNoShortIct node);
    void caseAIterationCmdNoIfCmdNoShortIct(AIterationCmdNoIfCmdNoShortIct node);
    void caseABlocoCmdNoShortIct(ABlocoCmdNoShortIct node);
    void caseAAttVarCmdSemCmd(AAttVarCmdSemCmd node);
    void caseAAttConstCmdSemCmd(AAttConstCmdSemCmd node);
    void caseACaptureCmdSemCmd(ACaptureCmdSemCmd node);
    void caseAShowCmdSemCmd(AShowCmdSemCmd node);
    void caseAIctDo(AIctDo node);
    void caseAIctDoElse(AIctDoElse node);
    void caseAIctDoElseNoShortIct(AIctDoElseNoShortIct node);
    void caseAAsLongAsIterationCmd(AAsLongAsIterationCmd node);
    void caseAConsideringIterationCmd(AConsideringIterationCmd node);
    void caseAAsLongAsIterationCmdNoShortIct(AAsLongAsIterationCmdNoShortIct node);
    void caseAConsideringIterationCmdNoShortIct(AConsideringIterationCmdNoShortIct node);
    void caseAOrExp(AOrExp node);
    void caseAAndExp(AAndExp node);
    void caseAXorExp(AXorExp node);
    void caseAIgualExp(AIgualExp node);
    void caseADiffExp(ADiffExp node);
    void caseAMaiorExp(AMaiorExp node);
    void caseAMenorExp(AMenorExp node);
    void caseAMaiorIExp(AMaiorIExp node);
    void caseAMenorIExp(AMenorIExp node);
    void caseASumExp(ASumExp node);
    void caseAMinusExp(AMinusExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseAModExp(AModExp node);
    void caseASymValExp(ASymValExp node);
    void caseARealValExp(ARealValExp node);
    void caseAIntValExp(AIntValExp node);
    void caseASymVecValExp(ASymVecValExp node);
    void caseAMinUnExp(AMinUnExp node);
    void caseANotExp(ANotExp node);
    void caseAVarExp(AVarExp node);

    void caseTCode(TCode node);
    void caseTSymbol(TSymbol node);
    void caseTReal(TReal node);
    void caseTInteger(TInteger node);
    void caseTStart(TStart node);
    void caseTFinish(TFinish node);
    void caseTVector(TVector node);
    void caseTConst(TConst node);
    void caseTInCaseThat(TInCaseThat node);
    void caseTAsLongAs(TAsLongAs node);
    void caseTConsidering(TConsidering node);
    void caseTShow(TShow node);
    void caseTCapture(TCapture node);
    void caseTElse(TElse node);
    void caseTDo(TDo node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTSymVal(TSymVal node);
    void caseTSymVecVal(TSymVecVal node);
    void caseTRealVal(TRealVal node);
    void caseTIntVal(TIntVal node);
    void caseTComment(TComment node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTMaiorI(TMaiorI node);
    void caseTMenorI(TMenorI node);
    void caseTIgual(TIgual node);
    void caseTDiff(TDiff node);
    void caseTAtt(TAtt node);
    void caseTAttConst(TAttConst node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLColch(TLColch node);
    void caseTRColch(TRColch node);
    void caseTLChav(TLChav node);
    void caseTRChav(TRChav node);
    void caseTPV(TPV node);
    void caseTComma(TComma node);
    void caseTId(TId node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
