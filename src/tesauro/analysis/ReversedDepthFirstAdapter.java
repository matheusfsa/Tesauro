/* This file was generated by SableCC (http://www.sablecc.org/). */

package tesauro.analysis;

import java.util.*;
import tesauro.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAPrograma(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        {
            List<PCmd> copy = new ArrayList<PCmd>(node.getCmd());
            Collections.reverse(copy);
            for(PCmd e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outABloco(node);
    }

    public void inAVarDeclaracao(AVarDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVarDeclaracao(AVarDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclaracao(AVarDeclaracao node)
    {
        inAVarDeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getLista());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVarDeclaracao(node);
    }

    public void inAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        inAConstanteDeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAConstanteDeclaracao(node);
    }

    public void inAConstAttDeclaracao(AConstAttDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstAttDeclaracao(AConstAttDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstAttDeclaracao(AConstAttDeclaracao node)
    {
        inAConstAttDeclaracao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAConstAttDeclaracao(node);
    }

    public void inASymbolTipo(ASymbolTipo node)
    {
        defaultIn(node);
    }

    public void outASymbolTipo(ASymbolTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolTipo(ASymbolTipo node)
    {
        inASymbolTipo(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outASymbolTipo(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAIntegerTipo(AIntegerTipo node)
    {
        defaultIn(node);
    }

    public void outAIntegerTipo(AIntegerTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTipo(AIntegerTipo node)
    {
        inAIntegerTipo(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerTipo(node);
    }

    public void inACompostoTipo(ACompostoTipo node)
    {
        defaultIn(node);
    }

    public void outACompostoTipo(ACompostoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompostoTipo(ACompostoTipo node)
    {
        inACompostoTipo(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getVec());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVector() != null)
        {
            node.getVector().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outACompostoTipo(node);
    }

    public void inASymValor(ASymValor node)
    {
        defaultIn(node);
    }

    public void outASymValor(ASymValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymValor(ASymValor node)
    {
        inASymValor(node);
        if(node.getSymVal() != null)
        {
            node.getSymVal().apply(this);
        }
        outASymValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getRealVal() != null)
        {
            node.getRealVal().apply(this);
        }
        outARealValor(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getIntVal() != null)
        {
            node.getIntVal().apply(this);
        }
        outAIntValor(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getSymVecVal() != null)
        {
            node.getSymVecVal().apply(this);
        }
        outAStringValor(node);
    }

    public void inACmdSemCmdCmd(ACmdSemCmdCmd node)
    {
        defaultIn(node);
    }

    public void outACmdSemCmdCmd(ACmdSemCmdCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdSemCmdCmd(ACmdSemCmdCmd node)
    {
        inACmdSemCmdCmd(node);
        if(node.getCmdSemCmd() != null)
        {
            node.getCmdSemCmd().apply(this);
        }
        outACmdSemCmdCmd(node);
    }

    public void inAIctDoCmd(AIctDoCmd node)
    {
        defaultIn(node);
    }

    public void outAIctDoCmd(AIctDoCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIctDoCmd(AIctDoCmd node)
    {
        inAIctDoCmd(node);
        if(node.getIctDo() != null)
        {
            node.getIctDo().apply(this);
        }
        outAIctDoCmd(node);
    }

    public void inAIctDoElseCmd(AIctDoElseCmd node)
    {
        defaultIn(node);
    }

    public void outAIctDoElseCmd(AIctDoElseCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIctDoElseCmd(AIctDoElseCmd node)
    {
        inAIctDoElseCmd(node);
        if(node.getIctDoElse() != null)
        {
            node.getIctDoElse().apply(this);
        }
        outAIctDoElseCmd(node);
    }

    public void inAIterationCmdCmd(AIterationCmdCmd node)
    {
        defaultIn(node);
    }

    public void outAIterationCmdCmd(AIterationCmdCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationCmdCmd(AIterationCmdCmd node)
    {
        inAIterationCmdCmd(node);
        if(node.getIterationCmd() != null)
        {
            node.getIterationCmd().apply(this);
        }
        outAIterationCmdCmd(node);
    }

    public void inABlocoCmd(ABlocoCmd node)
    {
        defaultIn(node);
    }

    public void outABlocoCmd(ABlocoCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoCmd(ABlocoCmd node)
    {
        inABlocoCmd(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoCmd(node);
    }

    public void inACmdSemCmdCmdNoShortIct(ACmdSemCmdCmdNoShortIct node)
    {
        defaultIn(node);
    }

    public void outACmdSemCmdCmdNoShortIct(ACmdSemCmdCmdNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdSemCmdCmdNoShortIct(ACmdSemCmdCmdNoShortIct node)
    {
        inACmdSemCmdCmdNoShortIct(node);
        if(node.getCmdSemCmd() != null)
        {
            node.getCmdSemCmd().apply(this);
        }
        outACmdSemCmdCmdNoShortIct(node);
    }

    public void inAIctDoElseNoIfCmdNoShortIct(AIctDoElseNoIfCmdNoShortIct node)
    {
        defaultIn(node);
    }

    public void outAIctDoElseNoIfCmdNoShortIct(AIctDoElseNoIfCmdNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIctDoElseNoIfCmdNoShortIct(AIctDoElseNoIfCmdNoShortIct node)
    {
        inAIctDoElseNoIfCmdNoShortIct(node);
        if(node.getIctDoElseNoShortIct() != null)
        {
            node.getIctDoElseNoShortIct().apply(this);
        }
        outAIctDoElseNoIfCmdNoShortIct(node);
    }

    public void inAIterationCmdNoIfCmdNoShortIct(AIterationCmdNoIfCmdNoShortIct node)
    {
        defaultIn(node);
    }

    public void outAIterationCmdNoIfCmdNoShortIct(AIterationCmdNoIfCmdNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationCmdNoIfCmdNoShortIct(AIterationCmdNoIfCmdNoShortIct node)
    {
        inAIterationCmdNoIfCmdNoShortIct(node);
        if(node.getIterationCmdNoShortIct() != null)
        {
            node.getIterationCmdNoShortIct().apply(this);
        }
        outAIterationCmdNoIfCmdNoShortIct(node);
    }

    public void inABlocoCmdNoShortIct(ABlocoCmdNoShortIct node)
    {
        defaultIn(node);
    }

    public void outABlocoCmdNoShortIct(ABlocoCmdNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoCmdNoShortIct(ABlocoCmdNoShortIct node)
    {
        inABlocoCmdNoShortIct(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoCmdNoShortIct(node);
    }

    public void inAAttVarCmdSemCmd(AAttVarCmdSemCmd node)
    {
        defaultIn(node);
    }

    public void outAAttVarCmdSemCmd(AAttVarCmdSemCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttVarCmdSemCmd(AAttVarCmdSemCmd node)
    {
        inAAttVarCmdSemCmd(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAttVarCmdSemCmd(node);
    }

    public void inAAttConstCmdSemCmd(AAttConstCmdSemCmd node)
    {
        defaultIn(node);
    }

    public void outAAttConstCmdSemCmd(AAttConstCmdSemCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttConstCmdSemCmd(AAttConstCmdSemCmd node)
    {
        inAAttConstCmdSemCmd(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAttConstCmdSemCmd(node);
    }

    public void inACaptureCmdSemCmd(ACaptureCmdSemCmd node)
    {
        defaultIn(node);
    }

    public void outACaptureCmdSemCmd(ACaptureCmdSemCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaptureCmdSemCmd(ACaptureCmdSemCmd node)
    {
        inACaptureCmdSemCmd(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PExp> copy = new ArrayList<PExp>(node.getLista());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outACaptureCmdSemCmd(node);
    }

    public void inAShowCmdSemCmd(AShowCmdSemCmd node)
    {
        defaultIn(node);
    }

    public void outAShowCmdSemCmd(AShowCmdSemCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowCmdSemCmd(AShowCmdSemCmd node)
    {
        inAShowCmdSemCmd(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PExp> copy = new ArrayList<PExp>(node.getLista());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAShowCmdSemCmd(node);
    }

    public void inAIctDo(AIctDo node)
    {
        defaultIn(node);
    }

    public void outAIctDo(AIctDo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIctDo(AIctDo node)
    {
        inAIctDo(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIctDo(node);
    }

    public void inAIctDoElse(AIctDoElse node)
    {
        defaultIn(node);
    }

    public void outAIctDoElse(AIctDoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIctDoElse(AIctDoElse node)
    {
        inAIctDoElse(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getCmdNoShortIct() != null)
        {
            node.getCmdNoShortIct().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIctDoElse(node);
    }

    public void inAIctDoElseNoShortIct(AIctDoElseNoShortIct node)
    {
        defaultIn(node);
    }

    public void outAIctDoElseNoShortIct(AIctDoElseNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIctDoElseNoShortIct(AIctDoElseNoShortIct node)
    {
        inAIctDoElseNoShortIct(node);
        if(node.getCmd2() != null)
        {
            node.getCmd2().apply(this);
        }
        if(node.getCmd1() != null)
        {
            node.getCmd1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIctDoElseNoShortIct(node);
    }

    public void inAAsLongAsIterationCmd(AAsLongAsIterationCmd node)
    {
        defaultIn(node);
    }

    public void outAAsLongAsIterationCmd(AAsLongAsIterationCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsLongAsIterationCmd(AAsLongAsIterationCmd node)
    {
        inAAsLongAsIterationCmd(node);
        if(node.getCmdAa() != null)
        {
            node.getCmdAa().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outAAsLongAsIterationCmd(node);
    }

    public void inAConsideringIterationCmd(AConsideringIterationCmd node)
    {
        defaultIn(node);
    }

    public void outAConsideringIterationCmd(AConsideringIterationCmd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsideringIterationCmd(AConsideringIterationCmd node)
    {
        inAConsideringIterationCmd(node);
        if(node.getCmdCons() != null)
        {
            node.getCmdCons().apply(this);
        }
        if(node.getInc() != null)
        {
            node.getInc().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getIni() != null)
        {
            node.getIni().apply(this);
        }
        if(node.getI() != null)
        {
            node.getI().apply(this);
        }
        outAConsideringIterationCmd(node);
    }

    public void inAAsLongAsIterationCmdNoShortIct(AAsLongAsIterationCmdNoShortIct node)
    {
        defaultIn(node);
    }

    public void outAAsLongAsIterationCmdNoShortIct(AAsLongAsIterationCmdNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsLongAsIterationCmdNoShortIct(AAsLongAsIterationCmdNoShortIct node)
    {
        inAAsLongAsIterationCmdNoShortIct(node);
        if(node.getCmdAa() != null)
        {
            node.getCmdAa().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outAAsLongAsIterationCmdNoShortIct(node);
    }

    public void inAConsideringIterationCmdNoShortIct(AConsideringIterationCmdNoShortIct node)
    {
        defaultIn(node);
    }

    public void outAConsideringIterationCmdNoShortIct(AConsideringIterationCmdNoShortIct node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsideringIterationCmdNoShortIct(AConsideringIterationCmdNoShortIct node)
    {
        inAConsideringIterationCmdNoShortIct(node);
        if(node.getCmdCons() != null)
        {
            node.getCmdCons().apply(this);
        }
        if(node.getInc() != null)
        {
            node.getInc().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getIni() != null)
        {
            node.getIni().apply(this);
        }
        if(node.getI() != null)
        {
            node.getI().apply(this);
        }
        outAConsideringIterationCmdNoShortIct(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAXorExp(AXorExp node)
    {
        defaultIn(node);
    }

    public void outAXorExp(AXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        inAXorExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAXorExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAIgualExp(node);
    }

    public void inADiffExp(ADiffExp node)
    {
        defaultIn(node);
    }

    public void outADiffExp(ADiffExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiffExp(ADiffExp node)
    {
        inADiffExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADiffExp(node);
    }

    public void inAMaiorExp(AMaiorExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp(AMaiorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp(AMaiorExp node)
    {
        inAMaiorExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMaiorExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMenorExp(node);
    }

    public void inAMaiorIExp(AMaiorIExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIExp(AMaiorIExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIExp(AMaiorIExp node)
    {
        inAMaiorIExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMaiorIExp(node);
    }

    public void inAMenorIExp(AMenorIExp node)
    {
        defaultIn(node);
    }

    public void outAMenorIExp(AMenorIExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIExp(AMenorIExp node)
    {
        inAMenorIExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMenorIExp(node);
    }

    public void inASumExp(ASumExp node)
    {
        defaultIn(node);
    }

    public void outASumExp(ASumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASumExp(ASumExp node)
    {
        inASumExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASumExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp(node);
    }

    public void inASymValExp(ASymValExp node)
    {
        defaultIn(node);
    }

    public void outASymValExp(ASymValExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymValExp(ASymValExp node)
    {
        inASymValExp(node);
        if(node.getSymVal() != null)
        {
            node.getSymVal().apply(this);
        }
        outASymValExp(node);
    }

    public void inARealValExp(ARealValExp node)
    {
        defaultIn(node);
    }

    public void outARealValExp(ARealValExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValExp(ARealValExp node)
    {
        inARealValExp(node);
        if(node.getRealVal() != null)
        {
            node.getRealVal().apply(this);
        }
        outARealValExp(node);
    }

    public void inAIntValExp(AIntValExp node)
    {
        defaultIn(node);
    }

    public void outAIntValExp(AIntValExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValExp(AIntValExp node)
    {
        inAIntValExp(node);
        if(node.getIntVal() != null)
        {
            node.getIntVal().apply(this);
        }
        outAIntValExp(node);
    }

    public void inASymVecValExp(ASymVecValExp node)
    {
        defaultIn(node);
    }

    public void outASymVecValExp(ASymVecValExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymVecValExp(ASymVecValExp node)
    {
        inASymVecValExp(node);
        if(node.getSymVecVal() != null)
        {
            node.getSymVecVal().apply(this);
        }
        outASymVecValExp(node);
    }

    public void inAMinUnExp(AMinUnExp node)
    {
        defaultIn(node);
    }

    public void outAMinUnExp(AMinUnExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinUnExp(AMinUnExp node)
    {
        inAMinUnExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMinUnExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarExp(node);
    }
}
