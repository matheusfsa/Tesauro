Package tesauro;

Helpers
 all = [0 .. 0xFFFF];
 digito = ['0' .. '9'];
 bin = ['0' + '1'];
 letra =[['a'..'z']+['A' .. 'Z']];
 number = digito+;
 espaco = ' ';
 tab = 9;
 cr = 13;
 lf = 10;
 eol = cr lf | cr | lf;
 not_cr_lf = [all - [cr + lf]];
 not_squotes = [all - '''];
 not_dquotes = [all - '"'];
 not_rcbrack = [all - '}'];
 exp = 'E'('-')?number;

Tokens
 /*Palavras reservadas*/
 code = 'code';
 symbol = 'symbol';
 real = 'real';
 integer = 'integer';
 start = 'start';
 finish = 'finish';
 vector = 'vector';
 const = 'unalterable';
 in_case_that = 'in'(espaco | tab | eol)+'case'(espaco | tab | eol)+'that';
 as_long_as = 'as'(espaco | tab | eol)+'long'(espaco | tab | eol)+'as';
 considering = 'considering';
 show = 'show';
 capture = 'capture';
 else = 'else';
 do = 'do';
 from = 'from';
 to = 'to';
 by = 'by'; 
 
 

 /*Valores dos tipos*/

 sym_val = ''' not_squotes ''';
 sym_vec_val =  '"' not_dquotes* '"';
 real_val = number'.'number(exp)?;
 int_val = ('d')?number|('-')?'b'bin+;
 
 /*Comentarios*/

 comment = '{' not_rcbrack* '}';

 /*Operadores*/

 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 menor = '<';
 maior = '>';
 maior_i = '>=';
 menor_i = '<=';
 igual = '==';
 diff = '!=';
 att = ':=';
 att_const = '=';
 not = '!';
 and = 'and';
 or = 'or';
 xor = 'xor';

 

 /*Delimitadores*/
 l_par = '(';
 r_par = ')';
 l_colch = '[';
 r_colch = ']';
 l_chav = '{';
 r_chav = '}';
 p_v = ';';
 comma = ',';
 
 /*Outros*/

 id = letra(letra|'_')*;
 blank = (espaco | tab | eol)+;

Ignored Tokens
 blank, comment;
 
Productions 

    programa {-> P.programa  } = code id bloco {-> New programa (id , bloco  )  };

    bloco {-> P.bloco  } = {abloco} start declaracao* cmd* finish {-> New bloco ([declaracao], [cmd])  };

    declaracao {-> P.declaracao  } = {avardeclaracao1} tipo [lista]:id_comma* id p_v {-> New declaracao.var (tipo, [lista.id], id)  }   |
     	{constante} const tipo id p_v {-> New declaracao.constante (tipo , id)  }   |
		{const_att} const tipo id att_const valor p_v {-> New declaracao.const_att (tipo , id , valor.exp)  };

    id_comma {-> T.id} = id comma{-> id  };

    tipo_base {-> P.tipo  } = {symbol} symbol {-> New tipo.symbol (symbol)  }   |
		{real} real {-> New tipo.real (real  )  }   |
		{integer} integer {-> New tipo.integer (integer  )  };

    tipo {-> P.tipo  } = {simples} tipo_base {-> tipo_base.tipo    }   |
		{composto} tipo_base vector tipo_vec+{-> New tipo.composto (tipo_base.tipo , vector , [tipo_vec.exp])  };

    tipo_vec {-> P.exp  } = l_colch valor r_colch {-> valor.exp  };

    var {-> P.exp  } = {avar} id var_vec*  {-> New exp.var (id , [ var_vec.exp ] )  };

    var_vec {-> P.exp  } = l_colch [left]:exp r_colch {-> left.exp  };

    cmd {-> P.cmd  } = {cmd_sem_cmd} cmd_sem_cmd {-> New cmd.cmd_sem_cmd (cmd_sem_cmd  )  }   |
		{ict_do} ict_do {-> New cmd.ict_do (ict_do  )  }   |
		{ict_do_else} ict_do_else {-> New cmd.ict_do_else (ict_do_else  )  }   |
		{iteration_cmd} iteration_cmd {-> New cmd.iteration_cmd (iteration_cmd  )  }   |
		{bloco} bloco {-> New cmd.bloco (bloco)};

    cmd_no_short_ict {-> P.cmd_no_short_ict  } = {cmd_sem_cmd} cmd_sem_cmd {-> New cmd_no_short_ict.cmd_sem_cmd (cmd_sem_cmd  )  }   |
		{ict_do_else_no_if} ict_do_else_no_short_ict {-> New cmd_no_short_ict.ict_do_else_no_if (ict_do_else_no_short_ict  )  }   |
		{iteration_cmd_no_if} iteration_cmd_no_short_ict {-> New cmd_no_short_ict.iteration_cmd_no_if (iteration_cmd_no_short_ict  )  }   |
		{bloco} bloco {-> New cmd_no_short_ict.bloco (bloco  )  };

    cmd_sem_cmd {-> P.cmd_sem_cmd  } = {att_cmd} att_cmd {-> att_cmd.cmd_sem_cmd  }   |
		{func_cmd} func_cmd {-> func_cmd.cmd_sem_cmd  };

    ict_do {-> P.ict_do  } = in_case_that l_par exp r_par do cmd {-> New ict_do (exp , cmd  )  };

    ict_do_else {-> P.ict_do_else  } =	in_case_that l_par exp r_par do cmd_no_short_ict else cmd {-> New ict_do_else (exp , cmd_no_short_ict ,cmd  )  };

    ict_do_else_no_short_ict {-> P.ict_do_else_no_short_ict  } = in_case_that l_par exp r_par do [cmd1]: cmd_no_short_ict else [cmd2]: cmd_no_short_ict {-> New ict_do_else_no_short_ict (exp, cmd1 , cmd2  )  };

    att_cmd {-> P.cmd_sem_cmd  } = {att_var} var att exp p_v {-> New cmd_sem_cmd.att_var (var.exp , exp)  }   |
		{att_const} const var att_const exp p_v {-> New cmd_sem_cmd.att_const (var.exp, exp)  };

    func_cmd {-> P.cmd_sem_cmd  } = {acapturefunccmd} capture l_par var_comma* var r_par p_v {-> New cmd_sem_cmd.capture ([ var_comma.exp ], var.exp)  }   |
		{ashowfunccmd} show l_par exp_comma* exp r_par p_v {-> New cmd_sem_cmd.show ([ exp_comma.exp], exp)  };

    iteration_cmd {-> P.iteration_cmd  } = {as_long_as} as_long_as l_par [cond]:exp r_par do [cmd_aa]:cmd {-> New iteration_cmd.as_long_as (cond.exp, cmd_aa.cmd)  }   |
		{considering} considering [i]:var from [ini]: exp to [fim]: exp by [inc]: exp do [cmd_cons]:cmd {-> New iteration_cmd.considering (i.exp ,  ini.exp, fim.exp, inc.exp , cmd_cons.cmd)  };

    iteration_cmd_no_short_ict {-> P.iteration_cmd_no_short_ict  } = {as_long_as} as_long_as l_par [cond]:exp r_par do [cmd_aa]:cmd_no_short_ict {-> New iteration_cmd_no_short_ict.as_long_as (cond.exp, cmd_aa.cmd_no_short_ict  )  }   |
		{considering} considering [i]:var from [ini]: exp to [fim]: exp by [inc]: exp do [cmd_cons]:cmd_no_short_ict {-> New iteration_cmd_no_short_ict.considering (i.exp , ini.exp , fim.exp , inc.exp , cmd_cons.cmd_no_short_ict  )  };

    var_comma {-> P.exp  } = var comma {-> var.exp };

    exp_comma {-> P.exp  } = exp comma {-> exp.exp  };

    exp {-> P.exp  } = {or_op} or_op {-> or_op.exp };

    or_op {-> P.exp  } = {and_op} and_op {-> and_op.exp }   |
		{or} [left]:or_op or [right]:and_op {-> New exp.or(left.exp, right.exp)  };

    and_op {-> P.exp  } = {xor_op} xor_op {-> xor_op.exp  }   |
		{and} [left]:and_op and [right]:xor_op {-> New exp.and(left.exp, right.exp)  };

    xor_op {-> P.exp  } = {eq_op} eq_op {-> eq_op.exp  }   |
		{xor} [left]:xor_op xor [right]:eq_op {-> New exp.xor(left.exp , right.exp)  };

    eq_op {-> P.exp  } = {rel_op} rel_op {-> rel_op.exp }   |
		{igual} [left]:eq_op igual [right]:rel_op {-> New exp.igual(left.exp, right.exp)  }   |
		{diff} [left]:eq_op diff [right]:rel_op {-> New exp.diff(left.exp, right.exp)  };

    rel_op {-> P.exp  } = {op} op {-> op.exp }   |
		{maior} [left]:rel_op maior [right]:op {-> New exp.maior(left.exp, right.exp)  }   |
		{menor} [left]:rel_op menor [right]:op {-> New exp.menor(left.exp, right.exp)  }   |
		{maior_i} [left]:rel_op maior_i [right]:op {-> New exp.maior_i(left.exp, right.exp)  }   |
		{menor_i} [left]:rel_op menor_i [right]:op {-> New exp.menor_i(left.exp, right.exp)  };

    op {-> P.exp  } = {fator} fator {-> fator.exp }   |
		{sum} [left]:op plus [right]:fator {-> New exp.sum(left.exp, right.exp)  }   |
		{minus} [left]:op minus [right]:fator {-> New exp.minus(left.exp, right.exp)  };

    fator {-> P.exp  } = {termo} termo {-> termo.exp }   |
		{mult} [left]:fator mult [right]:termo {-> New exp.mult(left.exp, right.exp)  }   |
		{div} [left]:fator div [right]:termo {-> New exp.div(left.exp, right.exp)  }   |
		{mod} [left]:fator mod [right]:termo {-> New exp.mod(left.exp, right.exp)  }   |
		{min_un} minus termo {-> New exp.min_un(termo.exp)  }   |
		{not} not termo {-> New exp.not(termo.exp)  };

    termo {-> P.exp  } = {valor} valor {-> valor.exp }   |
		{var} var {-> var.exp  }   |
		{par} l_par exp r_par {-> exp.exp };

    valor {-> P.exp  } = {sym} sym_val {-> New exp.sym_val(sym_val)}   |
        {real} real_val{-> New exp.real_val(real_val)}   |
        {int} int_val {-> New exp.int_val(int_val)  }   |
        {string} sym_vec_val {-> New exp.sym_vec_val(sym_vec_val)  };
    
    
Abstract Syntax Tree



    programa =
     id bloco;

    bloco =
     declaracao* cmd*;

    declaracao =
     {var} tipo [lista]:id* id| 
     {constante} tipo id| 
     {const_att} tipo id exp;

    tipo =
     {symbol} symbol | 
     {real} real | 
     {integer} integer |
     {composto} tipo vector [vec]:exp*;

    valor =
     {sym} sym_val | 
     {real} real_val | 
     {int} int_val | 
     {string} sym_vec_val;

    cmd =
     {cmd_sem_cmd} cmd_sem_cmd | 
     {ict_do} ict_do | 
     {ict_do_else} ict_do_else | 
     {iteration_cmd} iteration_cmd | 
     {bloco} bloco;

    cmd_no_short_ict =
     {cmd_sem_cmd} cmd_sem_cmd | 
     {ict_do_else_no_if} ict_do_else_no_short_ict | 
     {iteration_cmd_no_if} iteration_cmd_no_short_ict | 
     {bloco} bloco;

    cmd_sem_cmd =
     {att_var} [left]:exp [right]:exp | 
     {att_const} [left]:exp [right]:exp |
     {capture} [lista]:exp* exp | 
     {show} [lista]:exp* exp;

    ict_do =
     exp cmd;

    ict_do_else =
     exp cmd_no_short_ict cmd;
    ict_do_else_no_short_ict =
     exp [cmd1]: cmd_no_short_ict [cmd2]: cmd_no_short_ict;

    iteration_cmd =
     {as_long_as} [cond]:exp [cmd_aa]:cmd | 
     {considering} [i]:exp [ini]:exp [fim]:exp [inc]:exp [cmd_cons]:cmd;

    iteration_cmd_no_short_ict =
     {as_long_as} [cond]:exp [cmd_a
		
		super.outAAttVarCmdSemCmd(node);a]:cmd_no_short_ict | 
     {considering} [i]:exp [ini]: exp  [fim]: exp  [inc]: exp [cmd_cons]:cmd_no_short_ict;
     
    exp =
        {or} [left]:exp [right]:exp
        |{and} [left]:exp [right]:exp
        |{xor} [left]:exp [right]:exp
        |{igual} [left]:exp [right]:exp
        |{diff} [left]:exp [right]:exp
        |{maior} [left]:exp [right]:exp
        |{menor} [left]:exp [right]:exp
        |{maior_i} [left]:exp [right]:exp
        |{menor_i} [left]:exp [right]:exp
        |{sum} [left]:exp [right]:exp
        |{minus} [left]:exp [right]:exp
        |{mult} [left]:exp [right]:exp
        |{div} [left]:exp [right]:exp
        |{mod} [left]:exp [right]:exp
        |{sym_val} sym_val
        |{real_val} real_val
        |{int_val} int_val
        |{sym_vec_val} sym_vec_val
        |{min_un} exp
        |{not} exp
        |{var} id exp*;
		